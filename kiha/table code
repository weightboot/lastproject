// 1. high 테이블 생성
create table high
(id int, pnu varchar(20), high int, hscore int);

INSERT INTO high (id, pnu, high)
SELECT id, pnu, high
FROM (
    SELECT id, pnu, high
    FROM info
    ORDER BY pnu
) AS sorted_info;

UPDATE high
SET hscore = CASE
    WHEN high <= 50 THEN 100
    WHEN high >= 51 and high <= 100 THEN 75
	WHEN high >= 101 and high <= 150 THEN 50
	WHEN high >= 151 and high <= 200 THEN 25
    ELSE 0
    END;

// high 테이블 트리거생성 (hscore의 값 자동업데이트를 위한)
CREATE OR REPLACE FUNCTION calculate_hscore_function()
RETURNS TRIGGER AS $$
BEGIN
    -- NEW는 새로 삽입하거나 업데이트된 행을 나타냅니다.
    NEW.hscore := CASE
        WHEN NEW.high <= 50 THEN 100
        WHEN NEW.high >= 51 AND NEW.high <= 100 THEN 75
        WHEN NEW.high >= 101 AND NEW.high <= 150 THEN 50
        WHEN NEW.high >= 151 AND NEW.high <= 200 THEN 25
        ELSE 0
    END;

    -- 트리거 함수는 항상 NEW를 반환해야 합니다.
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- high 테이블에 트리거 생성
CREATE TRIGGER calculate_hscore_trigger
BEFORE INSERT OR UPDATE ON high
FOR EACH ROW
EXECUTE FUNCTION calculate_hscore_function();

// high table에 high 값 수정 예시
UPDATE high
SET high = 500
WHERE id = 1;








         // 2. slant 테이블 생성
create table slant
(id int, pnu varchar(20), slant varchar(10), sscore int);

INSERT INTO slant (id, pnu, slant)
SELECT id, pnu, slant
FROM (
    SELECT id, pnu, slant
    FROM info
    ORDER BY pnu
) AS sorted_info;

// sscore 값 생성
UPDATE slant
SET sscore = CASE
    WHEN slant = '평지' or slant = '저지'  THEN 100
    WHEN slant = '완경사' THEN 60
    WHEN slant = '급경사' THEN 30
    WHEN slant = '고지' then 0
    END;

// slant 테이블 트리거생성 (sscore의 값 자동업데이트를 위한)
CREATE OR REPLACE FUNCTION calculate_sscore_function()
RETURNS TRIGGER AS $$
BEGIN
    -- NEW는 새로 삽입되거나 업데이트된 행을 나타냅니다.
    NEW.sscore := CASE
        WHEN NEW.slant = '평지' OR NEW.slant = '저지' THEN 100
        WHEN NEW.slant = '완경사' THEN 60
        WHEN NEW.slant = '급경사' THEN 30
        WHEN NEW.slant = '고지' THEN 0
    END;

    -- 트리거 함수는 항상 NEW를 반환해야 합니다.
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 기존 트리거 삭제 (만약 존재할 경우)
DROP TRIGGER IF EXISTS calculate_sscore_trigger ON slant;

-- 새로운 트리거 생성
CREATE TRIGGER calculate_sscore_trigger
BEFORE INSERT OR UPDATE ON slant
FOR EACH ROW
EXECUTE FUNCTION calculate_sscore_function();








	//3. CV 테이블 생성
drop table CV

CREATE TABLE CV (
    id INT,
    pnu VARCHAR(20),
    CVdist DOUBLE PRECISION,
    CVscore INT
);

INSERT INTO CV (id, pnu, CVdist)
SELECT id, pnu, "c.v dist"
FROM info;



// CVscore 값 생성
UPDATE CV
SET CVscore = CASE
    WHEN CVdist <= 1  THEN 100
    WHEN CVdist > 1 and CVdist <= 2 THEN 60
    WHEN CVdist > 2 and CVdist <= 3 THEN 30
    WHEN CVdist > 3 then 0
    END;

// CVscore 값 자동업데이트 트리거 생성
CREATE OR REPLACE FUNCTION calculate_CVscore_function()
RETURNS TRIGGER AS $$
BEGIN
    -- NEW는 새로 삽입되거나 업데이트된 행을 나타냅니다.
    NEW.CVscore := CASE
        WHEN NEW.CVdist <= 1  THEN 100
        WHEN NEW.CVdist > 1 and NEW.CVdist <= 2 THEN 60
        WHEN NEW.CVdist > 2 and NEW.CVdist <= 3 THEN 30
        WHEN NEW.CVdist > 3 THEN 0
    END;

    -- 트리거 함수는 항상 NEW를 반환해야 합니다.
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER calculate_CVscore_trigger
BEFORE INSERT OR UPDATE ON CV
FOR EACH ROW
EXECUTE FUNCTION calculate_CVscore_function();







  //4. develop 테이블 생성
drop table develop

CREATE TABLE develop (
    id INT,
    pnu VARCHAR(20),
    Ddist DOUBLE PRECISION,
    Dscore INT
);

INSERT INTO develop (id, pnu, Ddist)
SELECT id, pnu, ROUND(CAST(hubdist / 1000.0 AS numeric), 3)
FROM info;


// Dscore 값 생성
UPDATE develop
SET Dscore = CASE
    WHEN Ddist <= 1  THEN 100
    WHEN Ddist > 1 and Ddist <= 1.5 THEN 75
    WHEN Ddist > 1.5 and Ddist <= 2 THEN 50
	WHEN Ddist > 2 and Ddist <= 3 THEN 25
    WHEN Ddist > 3 then 0
    END;

// Dscore 값 자동업데이트 트리거 생성
CREATE OR REPLACE FUNCTION calculate_Dscore_function()
RETURNS TRIGGER AS $$
BEGIN
    -- NEW는 새로 삽입되거나 업데이트된 행을 나타냅니다.
    NEW.Dscore := CASE
        WHEN NEW.Ddist <= 1  THEN 100
        WHEN NEW.Ddist > 1 and NEW.Ddist <= 1.5 THEN 75
        WHEN NEW.Ddist > 1.5 and NEW.Ddist <= 2 THEN 50
	 	WHEN NEW.Ddist > 2 and NEW.Ddist <= 3 THEN 25
        WHEN NEW.Ddist > 3 THEN 0
    END;

    -- 트리거 함수는 항상 NEW를 반환해야 합니다.
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER calculate_Dscore_trigger
BEFORE INSERT OR UPDATE ON develop
FOR EACH ROW
EXECUTE FUNCTION calculate_Dscore_function();









	//5. pricerate 테이블 생성 
drop table pricerate

CREATE TABLE pricerate (
    id INT,
    pnu VARCHAR(20),
    price DOUBLE PRECISION,
    pscore INT
);

-- 최소값과 최대값을 변수로 저장
DO $$ 
DECLARE
    min_price DOUBLE PRECISION;
    max_price DOUBLE PRECISION;
BEGIN
    -- 최소값과 최대값 계산
    SELECT MIN(price), MAX(price) INTO min_price, max_price
    FROM info
    WHERE price IS NOT NULL;

    -- 정규화된 값을 pricerate 테이블에 삽입
    INSERT INTO pricerate (id, pnu, price)
    SELECT 
        id,
        pnu,
  		ROUND(CAST((price - min_price) / (max_price - min_price) as numeric), 3)
        AS normalized_price
    FROM 
        info
    WHERE 
        price IS NOT NULL
    ORDER BY 
        pnu;
END $$;

// pscore 값 생성
UPDATE pricerate
SET pscore = CASE
    WHEN price >= 0.8  THEN 100
    WHEN price >= 0.6 and price < 0.8 THEN 90
    WHEN price >= 0.4 and price < 0.6 THEN 70
	WHEN price >= 0.2 and price < 0.4 THEN 50
    WHEN price < 0.2 then 30
    END;

// pscore 값 자동업데이트 트리거 생성
CREATE OR REPLACE FUNCTION calculate_pscore_function()
RETURNS TRIGGER AS $$
BEGIN
    -- NEW는 새로 삽입되거나 업데이트된 행을 나타냅니다.
    NEW.pscore := CASE
        WHEN NEW.price >= 0.8  THEN 100
        WHEN NEW.price >= 0.6 and NEW.price < 0.8 THEN 90
        WHEN NEW.price >= 0.4 and NEW.price < 0.6 THEN 70
	WHEN NEW.price >= 0.2 and NEW.price < 0.4 THEN 50
        WHEN NEW.price < 0.2 then 30
    END;

    -- 트리거 함수는 항상 NEW를 반환해야 합니다.
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER calculate_pscore_trigger
BEFORE INSERT OR UPDATE ON pricerate
FOR EACH ROW
EXECUTE FUNCTION calculate_pscore_function();










 //6. Road 테이블 생성 코드

drop table road

CREATE TABLE road (
    id INT,
    pnu VARCHAR(20),
    Rdist DOUBLE PRECISION,
    Rscore INT
);

INSERT INTO road (id, pnu)
SELECT id, pnu
FROM info order by pnu;


// Rscore 값 생성
UPDATE road
SET Rscore = CASE
    WHEN Rdist <= 1  THEN 100
    WHEN Rdist > 1 and Rdist <= 2 THEN 75
    WHEN Rdist > 2 and Rdist <= 3 THEN 50
	WHEN Rdist > 3 and Rdist <= 4 THEN 25
    WHEN Rdist > 4 then 0
    END;

// 트리거 생성
CREATE OR REPLACE FUNCTION calculate_Rscore_function()
RETURNS TRIGGER AS $$
BEGIN
    -- NEW는 새로 삽입되거나 업데이트된 행을 나타냅니다.
    NEW.Rscore := CASE
        WHEN NEW.Rdist <= 1  THEN 100
        WHEN NEW.Rdist > 1 and NEW.Rdist <= 2 THEN 75
        WHEN NEW.Rdist > 2 and NEW.Rdist <= 3 THEN 50
	 	WHEN NEW.Rdist > 3 and NEW.Rdist <= 4 THEN 25
        WHEN NEW.Rdist > 4 THEN 0
    END;

    -- 트리거 함수는 항상 NEW를 반환해야 합니다.
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER calculate_Rscore_trigger
BEFORE INSERT OR UPDATE ON Road
FOR EACH ROW
EXECUTE FUNCTION calculate_Rscore_function();







// 7.보전적성 FMarea 테이블 생성

drop table FMarea

CREATE TABLE FMarea (
    id INT,
    pnu VARCHAR(20),
    Arate DOUBLE PRECISION,
    Ascore INT
);

insert into FMarea (id, pnu) 
	select id, pnu from info
	order by pnu;


CREATE OR REPLACE FUNCTION calculate_Ascore_function()
RETURNS TRIGGER AS $$
BEGIN

    NEW.Ascore := CASE
        WHEN NEW.Arate >= 0.8  THEN 100
        WHEN NEW.Arate >= 0.6 and NEW.Arate < 0.8 THEN 90
        WHEN NEW.Arate >= 0.4 and NEW.Arate < 0.6 THEN 70
		WHEN NEW.Arate >= 0.2 and NEW.Arate < 0.4 THEN 50
        WHEN NEW.Arate < 0.2 then 30
    END;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER calculate_Ascore_trigger
BEFORE INSERT OR UPDATE ON FMarea
FOR EACH ROW
EXECUTE FUNCTION calculate_Ascore_function();





///8. Ecorate 테이블 생성
drop table Ecorate

CREATE TABLE Ecorate (
    id INT,
    pnu VARCHAR(20),
    Erate DOUBLE PRECISION,
    Escore INT
);

insert into Ecorate (id, pnu) 
	select id, pnu from info
	order by pnu;


CREATE OR REPLACE FUNCTION calculate_Escore_function()
RETURNS TRIGGER AS $$
BEGIN

    NEW.Escore := CASE
        WHEN NEW.Erate >= 0.8  THEN 100
        WHEN NEW.Erate >= 0.6 and NEW.Erate < 0.8 THEN 90
        WHEN NEW.Erate >= 0.4 and NEW.Erate < 0.6 THEN 70
		WHEN NEW.Erate >= 0.2 and NEW.Erate < 0.4 THEN 50
        WHEN NEW.Erate < 0.2 then 30
    END;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER calculate_Escore_trigger
BEFORE INSERT OR UPDATE ON Ecorate
FOR EACH ROW
EXECUTE FUNCTION calculate_Escore_function();






  	//9. RGarea 테이블 생성
drop table RGarea

CREATE TABLE RGarea (
    id INT,
    pnu VARCHAR(20),
    RGArate DOUBLE PRECISION,
    RGAscore INT
);

insert into RGarea (id, pnu) 
	select id, pnu from info
	order by pnu;


CREATE OR REPLACE FUNCTION calculate_RGAscore_function()
RETURNS TRIGGER AS $$
BEGIN

    NEW.RGAscore := CASE
        WHEN NEW.RGArate >= 0.8  THEN 100
        WHEN NEW.RGArate >= 0.6 and NEW.RGArate < 0.8 THEN 90
        WHEN NEW.RGArate >= 0.4 and NEW.RGArate < 0.6 THEN 70
		WHEN NEW.RGArate >= 0.2 and NEW.RGArate < 0.4 THEN 50
        WHEN NEW.RGArate < 0.2 then 30
    END;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER calculate_RGAscore_trigger
BEFORE INSERT OR UPDATE ON RGarea
FOR EACH ROW
EXECUTE FUNCTION calculate_RGAscore_function();












	//10. regulation 테이블 생성
drop table regulation

CREATE TABLE regulation (
    id INT,
    pnu VARCHAR(20),
    RGdist double precision,
    RGDscore INT
);

insert into regulation (id, pnu) 
	select id, pnu from info
	order by pnu;


CREATE OR REPLACE FUNCTION calculate_RGDscore_function()
RETURNS TRIGGER AS $$
BEGIN

    NEW.RGDscore := CASE
        WHEN NEW.RGdist <= 1  THEN 100
        WHEN NEW.RGdist > 1 and NEW.RGdist <= 2 THEN 75
        WHEN NEW.RGdist > 2 and NEW.RGdist <= 3 THEN 50
	 	WHEN NEW.RGdist > 3 and NEW.RGdist <= 4 THEN 25
        WHEN NEW.RGdist > 4 THEN 0
    END;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER calculate_RGDscore_trigger
BEFORE INSERT OR UPDATE ON regulation
FOR EACH ROW
EXECUTE FUNCTION calculate_RGDscore_function();











		// 11. farm 테이블 생성
drop table farm

CREATE TABLE farm (
    id INT,
    pnu VARCHAR(20),
    FMdist double precision,
    FMscore INT
);

insert into farm (id, pnu) 
	select id, pnu from info
	order by pnu;


CREATE OR REPLACE FUNCTION calculate_FMscore_function()
RETURNS TRIGGER AS $$
BEGIN

    NEW.FMscore := CASE
        WHEN NEW.FMdist <= 1  THEN 100
        WHEN NEW.FMdist > 1 and NEW.FMdist <= 2 THEN 75
        WHEN NEW.FMdist > 2 and NEW.FMdist <= 3 THEN 50
	 	WHEN NEW.FMdist > 3 and NEW.FMdist <= 4 THEN 25
        WHEN NEW.FMdist > 4 THEN 0
    END;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER calculate_FMscore_trigger
BEFORE INSERT OR UPDATE ON Farm
FOR EACH ROW
EXECUTE FUNCTION calculate_FMscore_function();





		// 12. Sea 테이블 생성
drop table Sea 

CREATE TABLE Sea (
    id INT,
    pnu VARCHAR(20),
    Seadist double precision,
    Seascore INT
);

insert into Sea (id, pnu) 
	select id, pnu from info
	order by pnu;


CREATE OR REPLACE FUNCTION calculate_Seascore_function()
RETURNS TRIGGER AS $$
BEGIN

    NEW.Seascore := CASE
        WHEN NEW.Seadist <= 1  THEN 100
        WHEN NEW.Seadist > 1 and NEW.Seadist <= 2 THEN 75
        WHEN NEW.Seadist > 2 and NEW.Seadist <= 3 THEN 50
	 	WHEN NEW.Seadist > 3 and NEW.Seadist <= 4 THEN 25
        WHEN NEW.Seadist > 4 THEN 0
    END;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER calculate_Seascore_trigger
BEFORE INSERT OR UPDATE ON Sea
FOR EACH ROW
EXECUTE FUNCTION calculate_Seascore_function();
















//
DROP TABLE IF EXISTS infoscore;

CREATE TABLE infoscore (
    id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    pnu VARCHAR(21),
    score INT,
    grade VARCHAR(10)
);

INSERT INTO infoscore (pnu, score, grade)
SELECT 
    pnu, 
    (sscore + "c.v score" + hubscore + hscore) AS score,
    CASE 
        WHEN (sscore + "c.v score" + hubscore + hscore) >= 351 THEN '마'
        WHEN (sscore + "c.v score" + hubscore + hscore) >= 262 THEN '라'
        WHEN (sscore + "c.v score" + hubscore + hscore) >= 155 THEN '다'
        WHEN (sscore + "c.v score" + hubscore + hscore) >= 38 THEN '나'
        ELSE '가'
    END AS grade
FROM info;

CREATE VIEW info_view AS
SELECT 
    info.pnu,
    info.address,
    info.jibun,
    info.jibuncode,
    info.area,
    info.youngdo,
    info.price,
    info.hscore,
    info.sscore,
    info."c.v score",
    info.hubscore,
    infoscore.score AS sumscore,
    infoscore.grade,
    info.geom
FROM info
left JOIN infoscore ON
info.pnu = infoscore.pnu
order by pnu;


//3. hscore에 null값이 있을때 null값 대신에 평균값으로 대체하는 쿼리 (시간있으면 반영)
-- 1. hscore의 평균 값을 계산하는 서브쿼리 작성
WITH avg_hscore AS (
    SELECT AVG(hscore) AS avg_hscore
    FROM info
)

-- 2. NULL 값을 평균 값으로 대체하여 뷰 생성
CREATE VIEW info_view AS
SELECT 
    info.id,
    info.pnu,
    info.address,
    info.jibun,
    info.jibuncode,
    info.area,
    info.youngdo,
    info.price,
    COALESCE(info.hscore, avg_hscore.avg_hscore) AS hscore, -- NULL 값을 평균 값으로 대체
    info.sscore,
    info."c.v score",
    info.hubscore,
    infoscore.score AS sumscore
    infoscore.grade
FROM info
JOIN infoscore ON info.id = infoscore.info_id
JOIN avg_hscore ON TRUE; -- 서브쿼리를 뷰의 다른 필드와 결합



//login 
create table login (id int generated always as identity primary key
, userId varchar(20) not null
, password varchar(20) not null
, name varchar(10) not null
, phone varchar(13) not null
, gender char(1) check(gender in('m', 'f')));

insert into login (userId, password, name, phone, gender) values
('b90168', 'qwerty', 'kimkiha', '010-1111-2222', 'm');
