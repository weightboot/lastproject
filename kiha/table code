// high 테이블 생성
create table high
(id int, pnu varchar(20), high int, hscore int);

INSERT INTO high (id, pnu, high)
SELECT id, pnu, high
FROM (
    SELECT id, pnu, high
    FROM info
    ORDER BY pnu
) AS sorted_info;

UPDATE high
SET hscore = CASE
    WHEN high <= 50 THEN 100
    WHEN high >= 51 and high <= 100 THEN 75
	WHEN high >= 101 and high <= 150 THEN 50
	WHEN high >= 151 and high <= 200 THEN 25
    ELSE 0
    END;

// high 테이블 트리거생성 (hscore의 값 자동업데이트를 위한)
CREATE OR REPLACE FUNCTION calculate_hscore_function()
RETURNS TRIGGER AS $$
BEGIN
    -- NEW는 새로 삽입하거나 업데이트된 행을 나타냅니다.
    NEW.hscore := CASE
        WHEN NEW.high <= 50 THEN 100
        WHEN NEW.high >= 51 AND NEW.high <= 100 THEN 75
        WHEN NEW.high >= 101 AND NEW.high <= 150 THEN 50
        WHEN NEW.high >= 151 AND NEW.high <= 200 THEN 25
        ELSE 0
    END;

    -- 트리거 함수는 항상 NEW를 반환해야 합니다.
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- high 테이블에 트리거 생성
CREATE TRIGGER calculate_hscore_trigger
BEFORE INSERT OR UPDATE ON high
FOR EACH ROW
EXECUTE FUNCTION calculate_hscore_function();

// high table에 high 값 수정 예시
UPDATE high
SET high = 500
WHERE id = 1;

         // slant 테이블 생성
create table slant
(id int, pnu varchar(20), slant varchar(10), sscore int);

INSERT INTO slant (id, pnu, slant)
SELECT id, pnu, slant
FROM (
    SELECT id, pnu, slant
    FROM info
    ORDER BY pnu
) AS sorted_info;

// sscore 값 생성
UPDATE slant
SET sscore = CASE
    WHEN slant = '평지' or slant = '저지'  THEN 100
    WHEN slant = '완경사' THEN 60
    WHEN slant = '급경사' THEN 30
    WHEN slant = '고지' then 0
    END;

// slant 테이블 트리거생성 (sscore의 값 자동업데이트를 위한)
CREATE OR REPLACE FUNCTION calculate_sscore_function()
RETURNS TRIGGER AS $$
BEGIN
    -- NEW는 새로 삽입되거나 업데이트된 행을 나타냅니다.
    NEW.sscore := CASE
        WHEN NEW.slant = '평지' OR NEW.slant = '저지' THEN 100
        WHEN NEW.slant = '완경사' THEN 60
        WHEN NEW.slant = '급경사' THEN 30
        WHEN NEW.slant = '고지' THEN 0
    END;

    -- 트리거 함수는 항상 NEW를 반환해야 합니다.
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- 기존 트리거 삭제 (만약 존재할 경우)
DROP TRIGGER IF EXISTS calculate_sscore_trigger ON slant;

-- 새로운 트리거 생성
CREATE TRIGGER calculate_sscore_trigger
BEFORE INSERT OR UPDATE ON slant
FOR EACH ROW
EXECUTE FUNCTION calculate_sscore_function();







//
DROP TABLE IF EXISTS infoscore;

CREATE TABLE infoscore (
    id INT GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    pnu VARCHAR(21),
    score INT,
    grade VARCHAR(10)
);

INSERT INTO infoscore (pnu, score, grade)
SELECT 
    pnu, 
    (sscore + "c.v score" + hubscore + hscore) AS score,
    CASE 
        WHEN (sscore + "c.v score" + hubscore + hscore) >= 351 THEN '마'
        WHEN (sscore + "c.v score" + hubscore + hscore) >= 262 THEN '라'
        WHEN (sscore + "c.v score" + hubscore + hscore) >= 155 THEN '다'
        WHEN (sscore + "c.v score" + hubscore + hscore) >= 38 THEN '나'
        ELSE '가'
    END AS grade
FROM info;

CREATE VIEW info_view AS
SELECT 
    info.pnu,
    info.address,
    info.jibun,
    info.jibuncode,
    info.area,
    info.youngdo,
    info.price,
    info.hscore,
    info.sscore,
    info."c.v score",
    info.hubscore,
    infoscore.score AS sumscore,
    infoscore.grade,
    info.geom
FROM info
left JOIN infoscore ON
info.pnu = infoscore.pnu
order by pnu;


//3. hscore에 null값이 있을때 null값 대신에 평균값으로 대체하는 쿼리 (시간있으면 반영)
-- 1. hscore의 평균 값을 계산하는 서브쿼리 작성
WITH avg_hscore AS (
    SELECT AVG(hscore) AS avg_hscore
    FROM info
)

-- 2. NULL 값을 평균 값으로 대체하여 뷰 생성
CREATE VIEW info_view AS
SELECT 
    info.id,
    info.pnu,
    info.address,
    info.jibun,
    info.jibuncode,
    info.area,
    info.youngdo,
    info.price,
    COALESCE(info.hscore, avg_hscore.avg_hscore) AS hscore, -- NULL 값을 평균 값으로 대체
    info.sscore,
    info."c.v score",
    info.hubscore,
    infoscore.score AS sumscore
    infoscore.grade
FROM info
JOIN infoscore ON info.id = infoscore.info_id
JOIN avg_hscore ON TRUE; -- 서브쿼리를 뷰의 다른 필드와 결합



//login 
create table login (id int generated always as identity primary key
, userId varchar(20) not null
, password varchar(20) not null
, name varchar(10) not null
, phone varchar(13) not null
, gender char(1) check(gender in('m', 'f')));

insert into login (userId, password, name, phone, gender) values
('b90168', 'qwerty', 'kimkiha', '010-1111-2222', 'm');
